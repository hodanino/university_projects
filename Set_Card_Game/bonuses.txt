BONUS CHALLENGE FORM
--------------------

For each bonus challenge you have implemented, please replace the sentence "We are not entitled to this bonus."
with a short description of:

1. How it was implemented in your code
2. Where it was used (in which class methods).
3. How you tested that it is working correctly.

--------------------

1. Fully supporting all configuration fields and avoiding the use of magic numbers
    1.We had used the config fields whenever we needed to use a number that represents elements of the game.

    2.It was used in all three classes. In player we used to decide the time of penalty and point, in Dealer we used to decide the length of the reshuffle time
    and in table we used to decide the table delay when replacing a card.
    
    3.We changed the values of the fields in the config.propeties file, and we checked through prints to the teminal.

--------------------

2. Terminating all threads (that you created) gracefully and in reverse order to the order they were created in.
    1. We stored our threads in an array of threads when we initialized them, and when we terminate them we do that in reverse order.

    2.We initialize them in the run method of the Dealer class, and calling a method createAndStartThreads, and terminating in teminate method in Dealer class.

    3.When we ran the game we made sure through the logger.

--------------------

3. Handling the config.turnTimeoutMillis value as follows:
config.turnTimeoutMillis < 0: display nothing.
config.turnTimeoutMillis = 0: display a timer since the last action (reshuffle or set collected).
Note: in modes without a countdown timer the dealer must ensure there is always at least one legal set on the table.

We are not entitled to this bonus.

--------------------

4. Making sure that the threads do not wake up unless some actual job needs to be done (e.g., a value needs to be
changed on the display, key input needs to be handled, etc.) and the only threads created by you are:
1 thread per player + 1 additional thread for non-human players.
    1.The Dealer wakes up and in wait state, The playerThread for each player whether an ai or a human player 
    is in wait state until the dealer notify it after checking a set, and when its an ai player the playerThread notifys the aiThread after a point or penalty.

    2.It was used in player run method, in createArtificialIntiligence run method and in getChecked method.
    In the dealer it was used in sleepUntilWokenOrTiemout method.

    3.We printed to the terminal when a thread is entering a wait state, when another thread notifys it and when it goes out of the wait method.
